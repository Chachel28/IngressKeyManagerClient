// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:ingress_key_manager/models/operation_entity.dart';
import 'package:ingress_key_manager/generated/json/operation_entity_helper.dart';
import 'package:ingress_key_manager/models/user_entity.dart';
import 'package:ingress_key_manager/generated/json/user_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
			case OperationEntity:
				return operationEntityFromJson(data as OperationEntity, json) as T;
			case OperationData:
				return operationDataFromJson(data as OperationData, json) as T;
			case OperationDataOwner:
				return operationDataOwnerFromJson(data as OperationDataOwner, json) as T;
			case OperationLinks:
				return operationLinksFromJson(data as OperationLinks, json) as T;
			case OperationMeta:
				return operationMetaFromJson(data as OperationMeta, json) as T;
			case UserEntity:
				return userEntityFromJson(data as UserEntity, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case OperationEntity:
				return operationEntityToJson(data as OperationEntity);
			case OperationData:
				return operationDataToJson(data as OperationData);
			case OperationDataOwner:
				return operationDataOwnerToJson(data as OperationDataOwner);
			case OperationLinks:
				return operationLinksToJson(data as OperationLinks);
			case OperationMeta:
				return operationMetaToJson(data as OperationMeta);
			case UserEntity:
				return userEntityToJson(data as UserEntity);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (OperationEntity).toString()){
			return OperationEntity().fromJson(json);
		}	else if(type == (OperationData).toString()){
			return OperationData().fromJson(json);
		}	else if(type == (OperationDataOwner).toString()){
			return OperationDataOwner().fromJson(json);
		}	else if(type == (OperationLinks).toString()){
			return OperationLinks().fromJson(json);
		}	else if(type == (OperationMeta).toString()){
			return OperationMeta().fromJson(json);
		}	else if(type == (UserEntity).toString()){
			return UserEntity().fromJson(json);
		}	
		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(<OperationEntity>[] is M){
			return data.map<OperationEntity>((e) => OperationEntity().fromJson(e)).toList() as M;
		}	else if(<OperationData>[] is M){
			return data.map<OperationData>((e) => OperationData().fromJson(e)).toList() as M;
		}	else if(<OperationDataOwner>[] is M){
			return data.map<OperationDataOwner>((e) => OperationDataOwner().fromJson(e)).toList() as M;
		}	else if(<OperationLinks>[] is M){
			return data.map<OperationLinks>((e) => OperationLinks().fromJson(e)).toList() as M;
		}	else if(<OperationMeta>[] is M){
			return data.map<OperationMeta>((e) => OperationMeta().fromJson(e)).toList() as M;
		}	else if(<UserEntity>[] is M){
			return data.map<UserEntity>((e) => UserEntity().fromJson(e)).toList() as M;
		}
		throw Exception("not fond");
	}

  static M fromJsonAsT<M>(json) {
    if (json is List) {
      return _getListChildType<M>(json);
    } else {
      return _fromJsonSingle<M>(json) as M;
    }
  }
}